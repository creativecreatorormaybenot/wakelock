// Autogenerated from Pigeon (v0.1.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class ToggleMessage {
  bool enable;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['enable'] = enable;
    return pigeonMap;
  }
  // ignore: unused_element
  static ToggleMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    if (pigeonMap == null){
      return null;
    }
    final ToggleMessage result = ToggleMessage();
    result.enable = pigeonMap['enable'];
    return result;
  }
}

class IsEnabledMessage {
  bool enabled;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['enabled'] = enabled;
    return pigeonMap;
  }
  // ignore: unused_element
  static IsEnabledMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    if (pigeonMap == null){
      return null;
    }
    final IsEnabledMessage result = IsEnabledMessage();
    result.enabled = pigeonMap['enabled'];
    return result;
  }
}

class WakelockApi {
  Future<void> toggle(ToggleMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.WakelockApi.toggle', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<IsEnabledMessage> isEnabled() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.WakelockApi.isEnabled', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return IsEnabledMessage._fromMap(replyMap['result']);
    }
    
  }
}

abstract class TestWakelockApi {
  void toggle(ToggleMessage arg);
  IsEnabledMessage isEnabled();
  static void setup(TestWakelockApi api) {
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.WakelockApi.toggle', StandardMessageCodec());
      channel.setMockMessageHandler((dynamic message) async {
        final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
        final ToggleMessage input = ToggleMessage._fromMap(mapMessage);
        api.toggle(input);
        return <dynamic, dynamic>{};
      });
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.WakelockApi.isEnabled', StandardMessageCodec());
      channel.setMockMessageHandler((dynamic message) async {
        final IsEnabledMessage output = api.isEnabled();
        return <dynamic, dynamic>{'result': output._toMap()};
      });
    }
  }
}

